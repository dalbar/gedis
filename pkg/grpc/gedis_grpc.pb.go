// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: gedis.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GedisClient is the migrate API for Gedis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GedisClient interface {
	GetValue(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Pair, error)
	PutPair(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Empty, error)
	DeleteValue(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Empty, error)
	Dump(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DatabaseDump, error)
	Heartbeat(ctx context.Context, in *InstanceKeyBroadCastReply, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	Broadcast(ctx context.Context, in *InstanceKeyBroadcast, opts ...grpc.CallOption) (*InstanceKeyBroadCastReply, error)
}

type gedisClient struct {
	cc grpc.ClientConnInterface
}

func NewGedisClient(cc grpc.ClientConnInterface) GedisClient {
	return &gedisClient{cc}
}

func (c *gedisClient) GetValue(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Pair, error) {
	out := new(Pair)
	err := c.cc.Invoke(ctx, "/Gedis/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gedisClient) PutPair(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Gedis/PutPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gedisClient) DeleteValue(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Gedis/DeleteValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gedisClient) Dump(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DatabaseDump, error) {
	out := new(DatabaseDump)
	err := c.cc.Invoke(ctx, "/Gedis/Dump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gedisClient) Heartbeat(ctx context.Context, in *InstanceKeyBroadCastReply, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/Gedis/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gedisClient) Broadcast(ctx context.Context, in *InstanceKeyBroadcast, opts ...grpc.CallOption) (*InstanceKeyBroadCastReply, error) {
	out := new(InstanceKeyBroadCastReply)
	err := c.cc.Invoke(ctx, "/Gedis/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GedisServer is the server API for Gedis service.
// All implementations must embed UnimplementedGedisServer
// for forward compatibility
type GedisServer interface {
	GetValue(context.Context, *KeyRequest) (*Pair, error)
	PutPair(context.Context, *Pair) (*Empty, error)
	DeleteValue(context.Context, *KeyRequest) (*Empty, error)
	Dump(context.Context, *Empty) (*DatabaseDump, error)
	Heartbeat(context.Context, *InstanceKeyBroadCastReply) (*HeartbeatResponse, error)
	Broadcast(context.Context, *InstanceKeyBroadcast) (*InstanceKeyBroadCastReply, error)
	mustEmbedUnimplementedGedisServer()
}

// UnimplementedGedisServer must be embedded to have forward compatible implementations.
type UnimplementedGedisServer struct {
}

func (UnimplementedGedisServer) GetValue(context.Context, *KeyRequest) (*Pair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedGedisServer) PutPair(context.Context, *Pair) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPair not implemented")
}
func (UnimplementedGedisServer) DeleteValue(context.Context, *KeyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValue not implemented")
}
func (UnimplementedGedisServer) Dump(context.Context, *Empty) (*DatabaseDump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dump not implemented")
}
func (UnimplementedGedisServer) Heartbeat(context.Context, *InstanceKeyBroadCastReply) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedGedisServer) Broadcast(context.Context, *InstanceKeyBroadcast) (*InstanceKeyBroadCastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedGedisServer) mustEmbedUnimplementedGedisServer() {}

// UnsafeGedisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GedisServer will
// result in compilation errors.
type UnsafeGedisServer interface {
	mustEmbedUnimplementedGedisServer()
}

func RegisterGedisServer(s grpc.ServiceRegistrar, srv GedisServer) {
	s.RegisterService(&Gedis_ServiceDesc, srv)
}

func _Gedis_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GedisServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gedis/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GedisServer).GetValue(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gedis_PutPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GedisServer).PutPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gedis/PutPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GedisServer).PutPair(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gedis_DeleteValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GedisServer).DeleteValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gedis/DeleteValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GedisServer).DeleteValue(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gedis_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GedisServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gedis/Dump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GedisServer).Dump(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gedis_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceKeyBroadCastReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GedisServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gedis/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GedisServer).Heartbeat(ctx, req.(*InstanceKeyBroadCastReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gedis_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceKeyBroadcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GedisServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gedis/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GedisServer).Broadcast(ctx, req.(*InstanceKeyBroadcast))
	}
	return interceptor(ctx, in, info, handler)
}

// Gedis_ServiceDesc is the grpc.ServiceDesc for Gedis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gedis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gedis",
	HandlerType: (*GedisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _Gedis_GetValue_Handler,
		},
		{
			MethodName: "PutPair",
			Handler:    _Gedis_PutPair_Handler,
		},
		{
			MethodName: "DeleteValue",
			Handler:    _Gedis_DeleteValue_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _Gedis_Dump_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Gedis_Heartbeat_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Gedis_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gedis.proto",
}
